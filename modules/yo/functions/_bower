#compdef bower
#autoload

# @description  bower zsh completion
# @require        'bower' to be installed


local state line context
# $opt_args is an associative array that contains command-line options like -d or -f
# as its keys and the actual parameters to those options (if any) as its values
local -A opt_args

local -a arguments
arguments=(
    '--help[Show the help message and quit]'
    '--no-color[Do not print colors (available in all commands)]'
    '--version[Show version information and quit]'
    # This describes how arguments (usually non-option arguments, those  not
    # beginning  with  - or +) are to be completed when neither of the first
    # two forms was provided.  Any number of arguments can be  completed  in
    # this fashion.
    '1:: :->cmd' # help, install, list, ls, uninstall, update, link, lookup, info, init, register, search, cache-clean, completion
    '2:: :->subcmd' #
)

# @description  manage completion for first argument
# @param    $1|argLevel2  list of ${words[@]}
# @return    void
__bower_completeArgOne() {
    local state="$1"

    case $state in
        cmd)
            local -a cmds options
            cmds=(
                install:'Installs a browser package locally into a components directory'
                list:'Lists all packages'
                ls:'Lists all packages'
                uninstall:'Uninstalls a browser package locally from your components directory'
                update:'Refreshes a package install'
                link:'The link functionality allows developers to easily test their packages. Linking is a two-step process.'
                lookup:'Looks up a package url by name'
                info:'Version info and description of a particular package.'
                init:'Creates a component.json file based on answers to questions'
                register:'Register a package.'
                search:'Finds all packages or a specific package.'
                cache-clean:'Cleans all the bower cache or the specified packages cache'
                completion:'Tab Completion for bower'
            )
            _describe -t commands "command list" cmds
            # _describe -t options "options list" options
            ;;
        subcmd)
            __bower_completeArgTwo "${words[@]}"
            ;;
    esac
    ret=0 # tells compsys you successfully added some completions
}


# @description  manage completion for second argument
# @param    $1|argLevel2  list of ${words[@]}
# @return    void
__bower_completeArgTwo() {
    local -a argLevel2
    argLevel2=( "$@" )

    case "$argLevel2[2]" in
        help)
            ;;
        init)
            subOptions=(
            )
            ;;
        install)
            subOptions=(
                --save:'Save installed packages into the project s component.json dependencies' \
                --save-dev:'Save installed packages into the project s component.json devDependencies' \
                --force:'Force fetching remote resources even if a local copy exists on disk' \
                --force-latest:'Force latest version on conflict' \
                --production:'Do not install project devDependencies' \
            )
            _describe -t sub-options "opitons list" subOptions
            ;;
        list|ls)
            subOptions=(
                --map:'Generates a deep dependency JSON source mapping' \
                --paths:'Generates a simple JSON source mapping' \
                --sources:'Generates list of source files in order of dependency' \
                --offline:'Avoid checking for newer versions'
            )
            _describe -t sub-options "opitons list" subOptions
            ;;
        uninstall|update)
            subOptions=(
                --save:'Updates dependencies entries in the project s component.json' \
                --force:'Force fetching remote resources even if a local copy exists on disk' \
                --force-latest:'Force latest version on conflict'
            )
            _describe -t sub-options "opitons list" subOptions
            ;;
        link)
            ;;
        lookup)
            ;;
        info)
            ;;
        init)
            ;;
        register)
            ;;
        search)
            ;;
        cache-clean)
            ;;
        completion)
            ;;
    esac
}

local -a subOptions


_arguments -C $arguments

__bower_completeArgOne "$state" # manage completion for first argument

return $ret
